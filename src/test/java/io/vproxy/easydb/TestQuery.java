package io.vproxy.easydb;

import io.vproxy.easydb.jdbc.JDBC;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import vjson.deserializer.rule.IntRule;
import vjson.deserializer.rule.ObjectRule;
import vjson.deserializer.rule.Rule;
import vjson.deserializer.rule.StringRule;

import static org.junit.Assert.*;

public class TestQuery {
    private JDBC jdbc;

    @Before
    public void before() throws Exception {
        BeforeAll.beforeClass();
        jdbc = BeforeAll.jdbc;

        jdbc.prepare(
            "CREATE MEMORY TABLE \"test_user\" (\n" +
            "  \"id\" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1) NOT NULL PRIMARY KEY,\n" +
            "  \"name\" VARCHAR(48) NOT NULL,\n" +
            "  \"age\" INTEGER NOT NULL\n" +
            ")\n"
        ).execute();
        jdbc.prepare("insert into \"test_user\" (\"name\", \"age\") values (?,?)")
            .param("alice").param(18)
            .execute();
        jdbc.prepare("insert into \"test_user\" (\"name\", \"age\") values (?,?)")
            .param("bob").param(20)
            .execute();
        jdbc.prepare("insert into \"test_user\" (\"name\", \"age\") values (?,?)")
            .param("charlie").param(22)
            .execute();
        jdbc.prepare("insert into \"test_user\" (\"name\", \"age\") values (?,?)")
            .param("eve").param(20)
            .execute();
    }

    @After
    public void tearDown() {
        jdbc.prepare("DROP TABLE \"test_user\"").execute();
    }

    private static class User {
        public int id;
        public String name;
        public int age;

        public static final Rule<User> rule = new ObjectRule<>(User::new)
            .put("id", (o, it) -> o.id = it, IntRule.get())
            .put("name", (o, it) -> o.name = it, StringRule.get())
            .put("age", (o, it) -> o.age = it, IntRule.get());
    }

    @Test
    public void findOneByField() {
        var user = jdbc.prepare("select * from \"test_user\" where \"name\" = ?")
            .param("bob")
            .query().convertFirst(User.rule);
        assertNotNull(user);
        assertEquals("bob", user.name);
        assertEquals(20, user.age);
    }

    @Test
    public void findMulti() {
        var ls = jdbc.prepare("select * from \"test_user\" where \"age\" = ? order by \"id\"")
            .param(20)
            .query().convert(User.rule);
        assertEquals(2, ls.size());
        for (var u : ls) {
            assertEquals(20, u.age);
        }
        assertEquals("bob", ls.get(0).name);
        assertEquals("eve", ls.get(1).name);
    }

    @Test
    public void findNothing() {
        var user = jdbc.prepare("select * from \"test_user\" where \"name\" = ?")
            .param("xxxxxx")
            .query().convertFirst(User.rule);
        assertNull(user);
        var opt = jdbc.prepare("select * from \"test_user\" where \"name\" = ?")
            .param("xxxxxx")
            .query().convertFirstOptional(User.rule);
        assertTrue(opt.isEmpty());
    }
}
