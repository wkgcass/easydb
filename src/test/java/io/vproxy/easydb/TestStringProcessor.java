package io.vproxy.easydb;

import io.vproxy.easydb.jdbc.JDBC;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import static org.junit.Assert.*;

public class TestStringProcessor {
    private JDBC jdbc;

    @Before
    public void setUp() throws Exception {
        BeforeAll.beforeClass();
        jdbc = BeforeAll.jdbc;

        jdbc.prepare(
            """
                CREATE MEMORY TABLE "test_user" (
                  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1) NOT NULL PRIMARY KEY,
                  "name" VARCHAR(48) NULL,
                  "age" INTEGER NOT NULL
                )
                """
        ).execute();
        jdbc.prepare()."""
                insert into "test_user" ("name", "age") values (\{"alice"},\{18})"""
            .execute();
        jdbc.prepare()."""
                insert into "test_user" ("name", "age") values (\{"bob"},\{20})"""
            .execute();
        jdbc.prepare()."""
                 insert into "test_user" ("name", "age") values (\{"charlie"},\{22})"""
            .execute();
        jdbc.prepare()."""
                insert into "test_user" ("name", "age") values (\{"eve"},\{20})"""
            .execute();
    }

    @After
    public void tearDown() {
        jdbc.prepare("DROP TABLE \"test_user\"").execute();
    }

    @Test
    public void query() {
        var name = "eve";
        var age = 20;
        var ls = jdbc.prepare()."""
            select * from "test_user" where "name" = \{name} and "age" = \{age}"""
            .query().convert(SimpleTest.User.rule);
        assertEquals(1, ls.size());
        assertEquals(name, ls.get(0).name);
        assertEquals(age, ls.get(0).age);
    }

    @Test
    public void transaction() {
        long count = jdbc.prepare("select count(*) as C from \"test_user\"").query().count();
        jdbc.transaction(conn -> {
            for (int i = 0; i < 5; ++i) {
                var name = String.valueOf((char) ('a' + i));
                var age = 100 + i;
                conn.prepare()."""
                    insert into "test_user" ("name", "age") values (\{name}, \{age})"""
                    .execute();
            }
        });
        long count2 = jdbc.prepare("select count(*) as C from \"test_user\"").query().count();
        assertEquals(5, count2 - count);
    }

    @Test
    public void badTransaction() {
        long count = jdbc.prepare("select count(*) as C from \"test_user\"").query().count();
        try {
            jdbc.transaction(conn -> {
                for (int i = 0; i < 5; ++i) {
                    var name = String.valueOf((char) ('a' + i));
                    var age = 100 + i;
                    conn.prepare()."""
                    insert into "test_user" ("name", "age") values (\{name}, \{age})"""
                        .execute();
                }
                throw new RuntimeException();
            });
            fail();
        } catch (RuntimeException ignore) {
        }
        long count2 = jdbc.prepare("select count(*) as C from \"test_user\"").query().count();
        assertEquals(count, count2);
    }

    @Test
    public void nullValue() {
        String name = null;
        jdbc.prepare()."""
            update "test_user" set "name" = \{name} where "name" = \{"alice"}"""
            .execute();
        var o = jdbc.prepare()."""
            select * from "test_user" where "age" = \{18}"""
            .query().convertFirst(SimpleTest.User.rule);
        assertNull(o.name);
    }
}
