package io.vproxy.easydb;

import io.vproxy.easydb.jdbc.JDBC;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import vjson.deserializer.rule.IntRule;
import vjson.deserializer.rule.ObjectRule;
import vjson.deserializer.rule.Rule;
import vjson.deserializer.rule.StringRule;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

public class TestTransaction {
    private JDBC jdbc;

    @Before
    public void before() throws Exception {
        BeforeAll.beforeClass();
        jdbc = BeforeAll.jdbc;

        jdbc.prepare(
            "CREATE MEMORY TABLE \"test_transaction\" (\n" +
            "  \"id\" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1) NOT NULL PRIMARY KEY,\n" +
            "  \"a\" VARCHAR(48) NOT NULL,\n" +
            "  \"b\" INTEGER NOT NULL,\n" +
            "  \"c\" INTEGER NOT NULL,\n" +
            "  \"d\" INTEGER NOT NULL\n," +
            "  UNIQUE (\"c\")" +
            ")\n"
        ).execute();
    }

    @After
    public void tearDown() {
        jdbc.prepare("DROP TABLE \"test_transaction\"").execute();
    }

    private static class Entity {
        public String a;
        public int b;
        public int c;
        public int d;
        public static final Rule<Entity> rule = new ObjectRule<>(Entity::new)
            .put("a", (o, it) -> o.a = it, StringRule.get())
            .put("b", (o, it) -> o.b = it, IntRule.get())
            .put("c", (o, it) -> o.c = it, IntRule.get())
            .put("d", (o, it) -> o.d = it, IntRule.get());
    }

    @Test
    public void insert() {
        jdbc.transaction(conn -> {
            conn.prepare("insert into \"test_transaction\" (\"a\", \"b\", \"c\", \"d\") values (?, ?, ?, ?)")
                .param("first").param(10).param(11).param(12)
                .execute();
            conn.prepare("insert into \"test_transaction\" (\"a\", \"b\", \"c\", \"d\") values (?, ?, ?, ?)")
                .param("second").param(20).param(21).param(22)
                .execute();
            conn.prepare("insert into \"test_transaction\" (\"a\", \"b\", \"c\", \"d\") values (?, ?, ?, ?)")
                .param("third").param(30).param(31).param(32)
                .execute();
        });
        var ls = jdbc.prepare("select * from \"test_transaction\" where 1 = 1 order by \"id\"")
            .query().convert(Entity.rule);
        assertEquals(3, ls.size());
        assertEquals("first", ls.get(0).a);
        assertEquals("second", ls.get(1).a);
        assertEquals("third", ls.get(2).a);
    }

    @Test
    public void insertFail() {
        jdbc.transaction(conn -> {
            conn.prepare("insert into \"test_transaction\" (\"a\", \"b\", \"c\", \"d\") values (?, ?, ?, ?)")
                .param("first").param(10).param(11).param(12)
                .execute();
            conn.prepare("insert into \"test_transaction\" (\"a\", \"b\", \"c\", \"d\") values (?, ?, ?, ?)")
                .param("second").param(20).param(21).param(22)
                .execute();
        });
        try {
            jdbc.transaction(conn -> {
                conn.prepare("insert into \"test_transaction\" (\"a\", \"b\", \"c\", \"d\") values (?, ?, ?, ?)")
                    .param("third").param(30).param(31).param(32)
                    .execute();
                conn.prepare("insert into \"test_transaction\" (\"a\", \"b\", \"c\", \"d\") values (?, ?, ?, ?)")
                    .param("bad").param(10).param(11).param(12)
                    .execute();
            });
            fail();
        } catch (SQLWException ignore) {
        }
        var ls = jdbc.prepare("select * from \"test_transaction\" where 1 = 1 order by \"id\"")
            .query().convert(Entity.rule);
        assertEquals(2, ls.size());
    }

    @Test
    public void insertWithConnection() {
        try (var conn = jdbc.connection()) {
            conn.transaction(c -> {
                c.prepare("insert into \"test_transaction\" (\"a\", \"b\", \"c\", \"d\") values (?, ?, ?, ?)")
                    .param("first").param(10).param(11).param(12)
                    .execute();
                c.prepare("insert into \"test_transaction\" (\"a\", \"b\", \"c\", \"d\") values (?, ?, ?, ?)")
                    .param("second").param(20).param(21).param(22)
                    .execute();
                c.prepare("insert into \"test_transaction\" (\"a\", \"b\", \"c\", \"d\") values (?, ?, ?, ?)")
                    .param("third").param(30).param(31).param(32)
                    .execute();
            });
        }
        var ls = jdbc.prepare("select * from \"test_transaction\" where 1 = 1 order by \"id\"")
            .query().convert(Entity.rule);
        assertEquals(3, ls.size());
        assertEquals("first", ls.get(0).a);
        assertEquals("second", ls.get(1).a);
        assertEquals("third", ls.get(2).a);
    }

    @Test
    public void insertFailWithConnection() {
        jdbc.transaction(conn -> {
            conn.prepare("insert into \"test_transaction\" (\"a\", \"b\", \"c\", \"d\") values (?, ?, ?, ?)")
                .param("first").param(10).param(11).param(12)
                .execute();
            conn.prepare("insert into \"test_transaction\" (\"a\", \"b\", \"c\", \"d\") values (?, ?, ?, ?)")
                .param("second").param(20).param(21).param(22)
                .execute();
        });
        try (var conn = jdbc.connection()) {
            conn.transaction(c -> {
                c.prepare("insert into \"test_transaction\" (\"a\", \"b\", \"c\", \"d\") values (?, ?, ?, ?)")
                    .param("third").param(30).param(31).param(32)
                    .execute();
                c.prepare("insert into \"test_transaction\" (\"a\", \"b\", \"c\", \"d\") values (?, ?, ?, ?)")
                    .param("bad").param(10).param(11).param(12)
                    .execute();
            });
            fail();
        } catch (SQLWException ignore) {
        }
        var ls = jdbc.prepare("select * from \"test_transaction\" where 1 = 1 order by \"id\"")
            .query().convert(Entity.rule);
        assertEquals(2, ls.size());
    }
}
